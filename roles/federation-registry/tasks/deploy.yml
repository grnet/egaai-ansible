---
  - name: Check if project exists
    stat:
      path: "{{ federation_registry_git.clone_dest }}"
    register: project_stat

  - name: Clean clone directory
    file:
      state: absent
      path: "{{ federation_registry_git.clone_dest }}"
    when: project_stat.stat.exists

  - name: Clone the repository
    git:
      repo: "{{federation_registry_git.git_repo}}"
      version: "{{federation_registry_git.git_branch}}"
      dest: "{{federation_registry_git.clone_dest}}"
      key_file: "{{ federation_registry_git.key_path }}"
      force: yes

  - name: Install node modules for react
    npm:
      path: "{{federation_registry_react_path}}"

  - name: Install node modules for express
    npm:
      path: "{{federation_registry_express_path}}"

  - name: Install node modules for ams-agent
    npm:
      path: "{{federation_registry_ams_agent_path}}"

  - name: React config
    template:
      src: react-config.j2
      dest: "{{federation_registry_react_path}}/src/config.json"
      backup: yes

  - name: Configure express db_config
    template:
      src: db_config.j2
      dest: "{{federation_registry_express_path}}/db-config/db-config.json"
      backup: yes

  - name: Expres env
    template:
      src: express-env.j2
      dest: "{{federation_registry_express_path}}/JavaScript/.env"
      backup: yes

  - name: Agent env
    template:
      src: ams-env.j2
      dest: "{{federation_registry_ams_agent_path}}/.env"
      backup: yes

  - name: delete existing pm2 processes if running
    command: "pm2 delete all"
    ignore_errors: True

  - name: Create pm2 ecosystem
    template:
     src: pm2_config.j2
     dest: "{{federation_registry_pm2_conf_path}}/ecosystem.config.js"
     backup: yes

  - name: start Pm2 processes
    command: "pm2 start ecosystem.config.js"

  - name: restart Pm2 processes
    command: "pm2 restart all"

  - name: react build
    shell: "npm run build"
    args:
      chdir: "{{ federation_registry_react_path }}"
      executable: /bin/bash

  - debug:
      msg: ams_is_verif

  - name: Verify push endpoint if not verified
    uri:
      url: "{{ federation_registry_ams.host }}/projects/{{ federation_registry_ams.project }}/subscriptions/{{ federation_registry_ams.sub }}:verifyPushEndpoint?key={{ federation_registry_ams.token }}"
      method: POST
      return_content: yes
      headers:
        Content-Type: "application/json"
      body_format: json
    when:
      - "not ams_is_verif"

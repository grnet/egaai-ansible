---
# E.g. 9.4 for Debian 8 "Jessie"
postgresql_version: "9.6"

postgresql_clients:
    # Connection type:
    # - "local": Unix-domain socket
    # - "host": plain or SSL-encrypted TCP/IP socket
    # - "hostssl": SSL-encrypted TCP/IP socket 
    # - "hostnossl": plain TCP/IP socket 
  - connection_type: "local"
    # Database: "all", "sameuser", "samerole", "replication", a database name,
    # or a comma-separated list thereof. The "all" keyword does not match 
    # "replication". Access to replication must be enabled in a separate record
    database: "all"
    # User: "all", a user name, a group name prefixed with "+", or a
    # comma-separated list thereof. In both the database and user fields you
    # can also write a file name prefixed with "@" to include names from a 
    # separate file.
    user: "postgres"
    # Address (for non-"local" connection_type only): the set of hosts the
    # client matches. It can be a host name, or it is made up of an IP address
    # and a CIDR mask that is an integer (between 0 and 32 (IPv4) or 128 
    # (IPv6) inclusive) that specifies the number of significant bits in the
    # mask. A host name that starts with a dot (.) matches a suffix of the
    # actual host name. Alternatively, you can write an IP address and netmask
    # in separate columns to specify the set of hosts. Instead of a
    # CIDR-address, you can write "samehost" to match any of the server's own
    # IP addresses, or "samenet" to match any address in any subnet that the
    # server is directly connected to.
    #address:
    # Method: "trust", "reject", "md5", "password", "gss", "sspi", "ident", 
    # "peer", "pam", "ldap", "radius" or "cert". Note that # "password" sends
    #  passwords in clear text; "md5" is preferred since it sends encrypted 
    # passwords.
    method: "peer"
  - connection_type: "local"
    database: "all"
    user: "all"
    method: "peer"
  - connection_type: "host"
    database: "all"
    user: "all"
    address: "127.0.0.1/32"
    method: "md5"
  - connection_type: "host"
    database: "all"
    user: "all"
    address: "::1/128"
    method: "md5"

#postgresql_replication_user: "repuser"
#postgresql_replication_password: "repuser"

postgresql_users: []
    # Username
  #- name: "theuser"
    # (Optional) Whether the password is stored hashed in the database
    #encrypted: yes
    # (Optional) User password
    #password: "thepassword"
    # (Optional) Name of database where permissions will be granted
    #db: "thedatabase"
    # (Optional) Privileges string in the format: 
    # "table:priv1,priv2"
    #priv: 
    # (Optional) Role attributes string in the format: 
    # "CREATEDB,CREATEROLE,SUPERUSER"
    # Available options:
    # - [NO]SUPERUSER
    # - [NO]CREATEROLE
    # - [NO]CREATEUSER
    # - [NO]CREATEDB
    # - [NO]INHERIT
    # - [NO]LOGIN
    # - [NO]REPLICATION
    #role_attr_flags:

postgresql_databases: []
    # Name of the database
  #- name: "thedatabase"
    # (Optional) Name of the role to set as owner of the database
    #owner: "theuser"
    # (Optional) Encoding of the database
    #encoding: "UTF8" 
    # (Optional) Collation order (LC_COLLATE) to use in the database. Must
    # match collation order of template database unless template0 is used as
    # template.
    #lc_collate: "en_US.UTF-8"
    # (Optional) Character classification (LC_CTYPE) to use in the database.
    # Must match LC_CTYPE of template database unless template0 is used as
    # template.
    #lc_ctype: "en_US.UTF-8"
    # (Optional) Template used to create the database
    #template: "thetemplate"

postgresql_privs: []
    # Name of database to connect to 
  #- database: "thedatabase"
    # Comma separated list of role (user/group) names to set permissions for.
    # The special value PUBLIC can be provided instead to set permissions for
    # the implicitly defined PUBLIC group.
    #roles: "theuser"
    # (Optional) Whether role may grant/revoke the specified privileges/group
    # memberships to others. Set to no to revoke GRANT OPTION, leave
    # unspecified to make no changes. grant_option only has an effect if state
    # is present.
    #grant_option: yes
    # (Optional) Comma separated list of privileges to grant/revoke.
    #privs:
    # Type of database object to set privileges on:
    # - table
    # - sequence
    # - function
    # - database
    # - schema
    # - language
    # - tablespace
    # - group
    #type: "table"
    # (Optional) Comma separated list of database objects to set privileges on.
    # If type is table or sequence, the special value ALL_IN_SCHEMA can be
    # provided instead to specify all database objects of type type in the
    # schema specified via schema. 
    # If type is database, this parameter can be omitted, in which case
    # privileges are set for the database specified via database.
    # If type is function, colons (":") in object names will be replaced with
    # commas
    #objs:
    # (Optional) Schema that contains the database objects specified via objs.
    # May only be provided if type is table, sequence or function. Defaults to
    # public in these cases. 
    #schema: public

# What IP address(es) to listen on
postgresql_listen_addresses: "localhost"

postgresql_port: 5432

postgresql_max_connections: 100

# Min 128kB
postgresql_shared_buffers: "128MB"

# Enables/disables the use of huge memory pages for PostgreSQL. 
# Valid values are: 
# - try (default) 
# - on
# - off
# The use of huge pages results in smaller page tables and less CPU time spent
# on memory management, increasing performance.
postgresql_huge_pages_mode: "try"

# Number of huge memory pages to be allocated
#postgresql_huge_pages_number: 0

# Min 64kB
postgresql_work_mem: "4MB"

# minimal, archive, hot_standby, or logical
postgresql_wal_level: "minimal"

# Allows archiving to be done.
postgresql_archive_mode: "off"

# Command to use to archive a logfile segment
# placeholders: %p = path of file to archive
#               %f = file name only
# e.g. 'test ! -f /mnt/server/archivedir/%f && cp %p /mnt/server/archivedir/%f'
postgresql_archive_command: ""

# Max number of walsender processes
postgresql_max_wal_senders: 0

# Number of logfile segments, 16MB each; 0 disables
postgresql_wal_keep_segments: 0

# Standby server settings (ignored on a master server)

# Master/primary server host 
postgresql_master_host: "{{ groups['dbmasterserver'][0] }}"

# Master/primary server port 
postgresql_master_port: "{{ hostvars[groups['dbmasterserver'][0]]['postgresql_port'] | default(postgresql_port) }}"
 
# "on" allows queries during recovery
postgresql_hot_standby_mode: "off"

# If set, the PostgreSQL server will try to connect to the master using this
# connection string and receive XLOG records continuously.
# e.g. 'host={{ postgresql_master_host }} port={{ postgresql_master_port }}'
postgresql_master_conninfo: ""

# By default, a standby server keeps restoring XLOG records from the primary
# indefinitely. If you want to stop the standby mode, finish recovery and open
# the system in read/write mode, specify a path to a trigger file. The server
# will poll the trigger file path periodically and start as a primary server
# when it's found.
postgresql_trigger_file: ""

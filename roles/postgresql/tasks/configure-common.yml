---

- name: Configure PostgreSQL client authentication
  template: 
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: "{{ postgresql_user }}"
    group: "{{ postgresql_group }}"
    mode: 0640 
    backup: yes
  with_items:
    - { src: "pg_hba.conf.j2", dest: "{{ postgresql_conf_path }}/main/pg_hba.conf" }
  become: yes
  notify:
    - Reload PostgreSQL

- name: Create PostgreSQL databases
  postgresql_db:
    state: present
    name: "{{ item.name }}"
    encoding: "{{ item.encoding | default(omit) }}"
    lc_collate: "{{ item.lc_collate | default(omit) }}"
    lc_ctype: "{{ item.lc_ctype | default(omit) }}"
    template: "{{ item.template | default(omit) }}"
  with_items: "{{ postgresql_databases }}"
  become: yes
  become_user: "{{ postgresql_user }}"

- name: Configure PostgreSQL users
  postgresql_user:
    state: present
    name: "{{ item.name }}"
    encrypted: "{{ item.encrypted | default(omit) }}" 
    password: "{{ item.password | default(omit) }}"
    db: "{{ item.db | default(omit) }}" 
    priv: "{{ item.priv | default(omit) }}"
    role_attr_flags: "{{ item.role_attr_flags | default(omit) }}"
  with_items: "{{ postgresql_users }}"
  become: yes
  become_user: "{{ postgresql_user }}"

- name: Configure connection limit of PostgreSQL users
  command: psql -U {{ postgresql_user }} -c 'ALTER ROLE {{ item.name }} WITH CONNECTION LIMIT {{ item.connection_limit }}'
  with_items: "{{ postgresql_users }}"
  when: "item.connection_limit is defined"
  become: yes
  become_user: "{{ postgresql_user }}"

- name: Configure privileges of PostgreSQL users
  postgresql_privs:
    state: present
    database: "{{ item.database }}"
    roles: "{{ item.roles }}"
    grant_option: "{{ item.grant_option | default(omit) }}"
    type: "{{ item.type | default(omit) }}"
    objs: "{{ item.objs | default(omit) }}"
    privs: "{{ item.privs | default(omit) }}"
    schema: "{{ item.schema | default(omit) }}"
  with_items: "{{ postgresql_privs }}"
  when: item.target is not defined 
  become: yes
  become_user: "{{ postgresql_user }}"

# See https://github.com/ansible/ansible-modules-core/issues/4493
- name: Configure default privileges of PostgreSQL users
  command: psql -U {{ postgresql_user }} -c 'ALTER DEFAULT PRIVILEGES FOR USER {{ item.target }} IN SCHEMA {{ item.schema | default("public") }} GRANT {{ item.privs }} ON {{ item.type }} TO {{ item.roles }};'
  with_items: "{{ postgresql_privs }}"
  when: item.target is defined
  become: yes
  become_user: "{{ postgresql_user }}"

- name: Configure PostgreSQL databases
  postgresql_db:
    state: present
    name: "{{ item.name }}"
    owner: "{{ item.owner | default(omit) }}"
    encoding: "{{ item.encoding | default(omit) }}"
    lc_collate: "{{ item.lc_collate | default(omit) }}"
    lc_ctype: "{{ item.lc_ctype | default(omit) }}"
    template: "{{ item.template | default(omit) }}"
  with_items: "{{ postgresql_databases }}"
  become: yes
  become_user: "{{ postgresql_user }}"

- name: Configure number of huge memory pages to be allocated
  sysctl:
    name: vm.nr_hugepages
    value: "{{ postgresql_huge_pages_number }}"
    state: present
  when: postgresql_huge_pages_number is defined
  become: yes

- name: Configure PostgreSQL
  template: 
    src: "{{ item.src }}"
    dest: "{{ item.dest }}" 
    owner: "{{ postgresql_user }}" 
    group: "{{ postgresql_group }}"
    mode: 0644
    backup: yes
  with_items:
    - { src: "postgresql.conf.j2", dest: "{{ postgresql_conf_path }}/main/postgresql.conf" }
  become: yes
  notify:
    - Restart PostgreSQL

- name: Check if PostreSQL standby server is in recovery 
  command: psql -U {{ postgresql_user }} -c 'SELECT pg_is_in_recovery();'
  when: "'dbstandbyservers' in group_names"
  register: postgresql_is_in_recovery_status
  ignore_errors: yes
  changed_when: no
  become: yes
  become_user: "{{ postgresql_user }}"

- name: Register PostgreSQL standby server recovery status
  set_fact:
    postgresql_is_in_recovery: "{{ postgresql_is_in_recovery_status|success and postgresql_is_in_recovery_status.stdout_lines[2].find('t') == 1 }}"
  when: "'dbstandbyservers' in group_names"

- include: init-standby-common.yml
  when: "'dbstandbyservers' in group_names and not postgresql_is_in_recovery"
